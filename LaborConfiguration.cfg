#  Example Qudi configuration file.
#  The recommended path for user specific files is C:\Users\<user_name>\qudi\config

global:
    # list of modules to load when starting
    startup_modules: []

    # Module server configuration for accessing qudi GUI/logic/hardware modules from remote clients
    remote_modules_server:
        address: 'localhost'
        port: 12345

    # Server port for serving the active qudi module namespace locally (localhost).
    # Used by e.g. the Qudi jupyter kernel.
    namespace_server_port: 18861

    # If this flag is set (True), all arguments passed to qudi module APIs from remote
    # (jupyter notebook, qudi console, remote modules) will be wrapped and passed "per value"
    # (serialized and de-serialized). This is avoiding a lot of inconveniences with using numpy in
    # remote clients.
    # If you do not want to use this workaround and know what you are doing, you can disable this
    # feature by setting this flag to False.
    force_remote_calls_by_value: True

    # Qss stylesheet for controlling the appearance of the GUIs.
    # Absolute path or relative to qudi.artwork.styles
    stylesheet: 'qdark.qss'

    # Default root directory for measurement data storage. All eventual data sub-directories should
    # be contained within this directory. This is not enforced, just convention.
    # The fallback directory is <user home>/qudi/Data/
    # default_data_dir: C:\Users\neverhorst\qudi\Data

    # Save data to daily data sub-directories by default
    daily_data_dirs: True

gui:
    time_series_gui:
        module.Class: 'time_series.time_series_gui.TimeSeriesGui'
        options:
            use_antialias: True  # optional, set to False if you encounter performance issues
        connect:
            _time_series_logic_con: time_series_reader_logic

    scanner_gui:
        module.Class: 'scanning.scannergui.ScannerGui'
        options:
            image_axes_padding: 0.02
            default_position_unit_prefix: null  # optional, use unit prefix characters, e.g. 'u' or 'n'
        connect:
            scanning_logic: scanning_probe_logic
            data_logic: scanning_data_logic
            optimize_logic: scanning_optimize_logic

    poi_manager_gui:
        module.Class: 'poimanager.poimanagergui.PoiManagerGui'
        #options:
        #    data_scan_axes: xy  #optional, default: xy
        connect:
            poi_manager_logic: 'poi_manager_logic'

    camera_gui:
        module.Class: 'camera.cameragui.CameraGui'
        connect:
            camera_logic: camera_logic

    laser_gui:
        module.Class: 'laser.laser_gui.LaserGui'
        connect:
            laser_logic: laser_logic

    odmr_gui:
        module.Class: 'odmr.odmrgui.OdmrGui'
        connect:
            odmr_logic: 'odmr_logic'

    switch_gui:
        module.Class: 'switch.switch_gui.SwitchGui'
        connect:
            switchlogic: 'switch_logic'

    pulsed_gui:
        module.Class: 'pulsed.pulsed_maingui.PulsedMeasurementGui'
        connect:
            pulsedmasterlogic: 'pulsed_master_logic'

    qdplot_gui:
        module.Class: 'qdplot.qdplot_gui.QDPlotterGui'
        connect:
            qdplot_logic: 'qdplot_logic'

    spectrometer:
        module.Class: 'spectrometer.spectrometer_gui.SpectrometerGui'
        connect:
            spectrometer_logic: 'spectrometerlogic'

    pid_gui:
        module.Class: 'pidgui.pidgui.PIDGui'
        connect:
            pid_logic: pid_logic

    task_runner_gui:
        module.Class: 'taskrunner.task_runner_gui.TaskRunnerGui'
        connect:
            task_runner: 'task_runner_logic'

logic:
    time_series_reader_logic:
        module.Class: 'time_series_reader_logic.TimeSeriesReaderLogic'
        options:
            max_frame_rate: 20  # optional (10Hz by default)
            calc_digital_freq: True  # optional (True by default)
        connect:
            streamer: nicard_62xx_instreamer

    scanning_probe_logic:
        module.Class: 'scanning_probe_logic.ScanningProbeLogic'
        options:
            max_history_length: 20
            max_scan_update_interval: 2
            position_update_interval: 1
        connect:
            scanner: scanner_dummy

    scanning_data_logic:
        module.Class: 'scanning_data_logic.ScanningDataLogic'
        options:
            max_history_length: 20
        connect:
            scan_logic: scanning_probe_logic

    scanning_optimize_logic:
        module.Class: 'scanning_optimize_logic.ScanningOptimizeLogic'
        connect:
            scan_logic: scanning_probe_logic

    poi_manager_logic:
        module.Class: 'poi_manager_logic.PoiManagerLogic'
        connect:
            scanning_logic: 'scanning_probe_logic'
            optimize_logic: 'scanning_optimize_logic'
            data_logic: 'scanning_data_logic'

    camera_logic:
        module.Class: 'camera_logic.CameraLogic'
        connect:
            camera: 'camera_dummy'

    laser_logic:
        module.Class: 'laser_logic.LaserLogic'
        options:
            query_interval: 0.1
        connect:
            laser: 'laser_dummy'

    odmr_logic:
        module.Class: 'odmr_logic.OdmrLogic'
        connect:
            microwave: 'tabor_3G' 
            # data_scanner: ni62xx_multiple_finite_sampling_input 
            data_scanner: ni62xx_finite_sampling_input

    switch_logic:
        module.Class: 'switch_logic.SwitchLogic'
        options:
            watchdog_interval: 1
            autostart_watchdog: True
        connect:
            switch: 'switch_interfuse'

    pulsed_master_logic:
        module.Class: 'pulsed.pulsed_master_logic.PulsedMasterLogic'
        connect:
            pulsedmeasurementlogic: 'pulsed_measurement_logic'
            sequencegeneratorlogic: 'sequence_generator_logic'

    sequence_generator_logic:
        module.Class: 'pulsed.sequence_generator_logic.SequenceGeneratorLogic'
        #overhead_bytes: 0
        #additional_predefined_methods_path: null
        #additional_sampling_functions_path: null
        #assets_storage_path:
        connect:
            # pulsegenerator: pulser_dtg
            pulsegenerator: 'pulseblaster'#'pulser_dummy'
             # pulsegenerator: 'awg_spectrum'

    pulsed_measurement_logic:
        module.Class: 'pulsed.pulsed_measurement_logic.PulsedMeasurementLogic'
        options:
            raw_data_save_type: 'text'
            #additional_extraction_path:
            #additional_analysis_path:
        connect:
            fastcounter: 'spectrum_fast_sampling'
            # fastcounter: 'fast_counter_dummy'
            #microwave: 'microwave_dummy'
            pulsegenerator: 'pulseblaster'
            # pulsegenerator: 'pulser_dummy'

#    sequencegeneratorlogic_AWG:
#       module.Class: 'pulsed.sequence_generator_logic.SequenceGeneratorLogic'
#        assets_storage_path: 'C:\\Users\\yy3\\saved_pulsed_assets\\sequence'
#        #additional_predefined_methods_path: 'C:\\Custom_dir'  # optional, can also be lists on several folders
#        #additional_sampling_functions_path: 'C:\\Custom_dir'  # optional, can also be lists on several folders
#        overhead_bytes: 4294967296  # Not properly implemented yet
#        disable_benchmark_prompt: True
#        connect:
#            pulsegenerator: 'awg_spectrum'


    qdplot_logic:
        module.Class: 'qdplot_logic.QDPlotLogic'

    spectrometerlogic:
        module.Class: 'spectrometer_logic.SpectrometerLogic'
        connect:
            spectrometer: 'spectrometer_dummy'

    pid_logic:
        module.Class: 'pid_logic.PIDLogic'
        connect:
            controller: 'softpid'
        options:
            timestep: 0.1

    softpid:
        module.Class: 'software_pid_controller.SoftPIDController'
        options:
            process_value_channel: 'Temperature'
            setpoint_channel: 'Current'
            timestep: 100
        connect:
            process_value: process_control_dummy
            setpoint: process_control_dummy

    task_runner_logic:
        module.Class: 'taskrunner.TaskRunnerLogic'
        options:
            module_tasks: {}

hardware:

    nicard_62xx_instreamer:
        module.Class: 'ni_x_series.ni_x_series_in_streamer.NIXSeriesInStreamer'
        options:
            device_name: 'Dev1'
            #digital_sources:  # optional
            #    - 'PFI15'
            analog_sources:  # optional
                - 'ai0'
                - 'ai1'
                - 'ai2'
                - 'ai3'
            # external_sample_clock_source: 'PFI0'  # optional
            # external_sample_clock_frequency: 1000  # optional
            adc_voltage_range: [-10, 10]  # optional
            max_channel_samples_buffer: 10000000  # optional
            read_write_timeout: 10  # optional

    ni62xx_finite_sampling_input:
        module.Class: 'ni_x_series.ni_x_series_finite_sampling_input.NIXSeriesFiniteSamplingInput'
        options:
            device_name: 'Dev1'
            #digital_channel_units:  # optional
            #    'PFI15': 'c/s'
            analog_channel_units:  # optional
                'ai0': 'V'
            #    'ai1': 'V'
            # external_sample_clock_source: 'PFI0'  # optional
            # external_sample_clock_frequency: 1000  # optional
            adc_voltage_range: [-10, 10]  # optional, default [-10, 10]
            max_channel_samples_buffer: 10000000  # optional, default 10000000
            #read_write_timeout: 10  # optional, default 10
            sample_clock_output: '/Dev1/PFI0'  # optional
    
    ni62xx_multiple_finite_sampling_input:
        module.Class: 'ni_x_series.ni_x_series_multiple_finite_sampling_input.NIXSeriesMultipleFiniteSamplingInput'
        options:
            device_name: 'Dev1'
            #digital_channel_units:  # optional
            #    'PFI15': 'c/s'
            analog_channel_units:  # optional
                'ai0': 'V'
            #    'ai1': 'V'
            external_sample_clock_source: 'PFI0'  # optional
            # external_sample_clock_frequency: 1000  # optional
            num_pusles : 200 # must the same as the parameter "Points" in GUI
            sample_rate : 1e6
            num_samples : 100  # make sure (sample time = num_samples / sample_rate) < periode of one trigger
            adc_voltage_range: [-10, 10]  # optional, default [-10, 10]
            max_channel_samples_buffer: 10000000  # optional, default 10000000
            #read_write_timeout: 10  # optional, default 10
            sample_clock_output: '/Dev1/PFI12'  # optional

    ni_fast_sampling:
        module.Class: 'ni_x_series.ni_x_series_fast_sampling.NiXFastSampling'
        options:
            device_name: 'Dev1'
            analog_channel_units:  # optional
                'ai0': 'V'
            external_sample_clock_source: 'PFI0'  # optional
            num_pusles : 50

            adc_voltage_range: [-10, 10]  # optional, default [-10, 10]
            max_channel_samples_buffer: 10000000  # optional, default 10000000
            # read_write_timeout: 10  # optional, default 10
            # sample_clock_output: '/Dev1/PFI12'  # optional


    ni62xx_finite_sampling_io:
        module.Class: 'ni_x_series.ni_x_series_finite_sampling_io.NIXSeriesFiniteSamplingIO'
        options:
            device_name: 'Dev1'
            input_channel_units:
                PFI8: 'c/s'
                PFI9: 'c/s'
                ai0: 'V'
                ai1: 'V'
            output_channel_units: # Specify used output channels
                'ao0': 'V'
                'ao1': 'V'
                'ao2': 'V'
                'ao3': 'V'
            adc_voltage_ranges:
                ai0: [-10, 10]  # optional
                ai1: [-10, 10]  # optional
            output_voltage_ranges:
                ao0: [-1.5, 1.5]
                ao1: [-1.5, 1.5]
                ao2: [0, 10.0]
                ao3: [-10.0, 10.0]
            frame_size_limits: [1, 1e9]  # optional #TODO actual HW constraint?
            default_output_mode: 'JUMP_LIST' # optional, must be name of SamplingOutputMode
            read_write_timeout: 10  # optional
            sample_clock_output: '/Dev1/PFI11' # optional: routing of sample clock to a physical connection
    
    tabor_12G:
        module.Class: 'microwave.mw_source_tabor.MicrowaveTabor'
        options:
            channel : 1                 
            teVendorId  : 0x168C
            teLucidDesktopId  : 0x6002  # Use this for Lucid Desktop - 6GHz
            teLucidPortableId : 0x6081  # Use this for Lucid Portable - 6GHz + 1 Channel
            teLucidBenchtopId : 0x1202  # Use this for Lucid Benchtop - 12GHz + 2 Channels
            BUFFER_SIZE : 256
            FM_MODE     : 0             # 1-ON, 0-OFF 
    
    anapico_APSIN3000:
        module.Class: 'microwave.mw_source_anapico.MicrowaveAnaPicoAPSin'
        options:
            visa_address: 'TCPIP::129.69.46.78'
            comm_timeout: 1000 # in ms             

    tabor_3G:
        module.Class: 'microwave.mw_source_tabor.MicrowaveTabor'
        options:
            channel : 1
            teVendorId  : 0x168C
            teLucidDesktopId  : 0x6002  # Use this for Lucid Desktop - 6GHz
            teLucidPortableId : 0x6081  # Use this for Lucid Portable - 6GHz + 1 Channel
            teLucidBenchtopId : 0x3002  # Use this for Lucid Benchtop - 12GHz + 2 Channels
            BUFFER_SIZE : 256
            FM_MODE     : 0             # 1-ON, 0-OFF

    awg_spectrum:
        module.Class: 'awg.spectrumAWG_6631.AWG663'
        options:
            awg_ip_address: 129.69.46.21
            timeout: 30
            waveform_folder: 'C:\\Users\\yy3\\saved_pulsed_assets\\waveform'
            sequence_folder: 'C:\\Users\\yy3\\saved_pulsed_assets\\sequence'
            invert_channel: "d_ch2" # Invert switch channel

    pulser_dtg:
        module.Class: 'dig_generator.tektronix_dtg5334.DTG5334'
        options:
            visa_address: 'GPIB0::1::INSTR'
    
    pulseblaster:
        module.Class: 'spincore.pulse_blaster_esrpro.PulseBlasterESRPRO'
        options:
            clock_frequency: 500e6 # in Hz
            min_instr_len: 5    # number of clock cycles for minimal instruction
            debug_mode: False   # optional, to set the debug mode on or off.
            use_smart_pulse_creation: False # optinal, default is false, try to
                                            # optimize the memory used on the device.
            #library_file: 'spinapi64.dll'  # optional, name of the library file
                                            # or  whole path to the file
    
    spectrum_fast_sampling:
        module.Class: 'spectrum.spectrum_fast_sampling.SpectrumFastSampling'
        options:
            # buffer_size: 4194304       # unit: uint64(MEGA_B(4)), as huge as possible
            # segment_size: 4096         # samples per trigger
            # samples_per_loop: 1048576  # unit: uint64(KILO_B( ))
            # sample_rate: 20            # unit: int64(MEGA( ))
            # channel: 1                 # channel = 1
            # timeout: 5000              # unit: ms
            # input_range: 5000          # unit: mV
            buffer_size: 4096       # unit: uint64(MEGA_B(4)), as huge as possible
            segment_size: 4096         # samples per trigger
            samples_per_loop: 1024  # unit: uint64(KILO_B( ))
            sample_rate: 20            # unit: int64(MEGA( ))
            channel: 1                 # channel = 1
            timeout: 5000              # unit: ms
            input_range: 5000          # unit: mV



    pulser_dummy:
        module.Class: 'dummy.pulser_dummy.PulserDummy'
    microwave_dummy:
        module.Class: 'dummy.microwave_dummy.MicrowaveDummy'
    fast_counter_dummy:
        module.Class: 'dummy.fast_counter_dummy.FastCounterDummy'
        options:
            gated: False
    # smiq_2:
    #     module.Class: 'microwave.mw_source_smiq.MicrowaveSmiq'
    #     options:  
    #         visa_address: 'GPIB0::28::INSTR'
    #         comm_timeout: 10000  # in milliseconds
    #         visa_baud_rate: null  # optional
    #         rising_edge_trigger: True  # optional
    #         frequency_min: null  # optional, in Hz
    #         frequency_max: null  # optional, in Hz
    #         power_min: null  # optional, in dBm
    #         power_max: null  # optional, in dBm
    # pulser_dtg:
    #     module.Class: 'dtg.dtg5334.DTG5334'
    #     options:
    #         visa_address: 'GPIB0::1::INSTR'
    # tabor_LS3082B:
    #    module.Class: 'microwave.mw_source_taborLS.MicrowaveSmiq'
    #    options:
    #         vendor_id: 0x168C
    #         product_id: 0x1202
    

